import os
import tkinter as tk
import customtkinter as ctk
from tkinter import filedialog
import cv2

import config
from image_proc import ImageProcessor
from config import DATASET_SUBFOLDERS


class PreprocessorFrame(ctk.CTkFrame):
    def __init__(self, parent):
        super().__init__(parent)

        self.dataset_path_var = tk.StringVar()
        self.save_path_var = tk.StringVar(value="processed")
        self.img_width = tk.IntVar(value=config.IMG_SIZE[0])
        self.img_height = tk.IntVar(value=config.IMG_SIZE[1])

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞
        self.configure(corner_radius=10)
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=3)  # –ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (–ª–æ–≥) ‚Äî 3 —á–∞—Å—Ç–∏
        self.grid_columnconfigure(1, weight=1)  # –ø—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è) ‚Äî 1 —á–∞—Å—Ç—å

        self.build_ui()

    def build_ui(self):
        # === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–µ–π–º–∞ ===
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=3)  # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        self.grid_columnconfigure(1, weight=0)  # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞

        # === –õ–µ–≤–∞—è —á–∞—Å—Ç—å (–ª–æ–≥) ===
        self.log_frame = ctk.CTkFrame(self, fg_color="transparent")
        self.log_frame.grid(row=0, column=0, sticky="nsew", padx=(15, 0), pady=5)

        self.log_frame.grid_rowconfigure(1, weight=1)
        self.log_frame.grid_columnconfigure(0, weight=1)

        log_label = ctk.CTkLabel(self.log_frame, text="–õ–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        log_label.grid(row=0, column=0, sticky="w", padx=5, pady=(5, 0))

        self.log_textbox = ctk.CTkTextbox(self.log_frame)
        self.log_textbox.grid(row=1, column=0, sticky="nsew", padx=5, pady=5)

        # === –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å (–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è) —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π 300 ===
        # --- –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞) ---
        self.control_frame = ctk.CTkScrollableFrame(self, fg_color="transparent", width=300)
        self.control_frame.grid(row=0, column=1, sticky="ns", padx=(10, 15), pady=10)
        # –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤

        self.control_frame.grid_rowconfigure(20, weight=1)

        # –°–∫—Ä—ã–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        scrollbar = self.control_frame._scrollbar
        scrollbar.configure(width=0)  # —à–∏—Ä–∏–Ω–∞ 0 ‚Äî –Ω–µ –≤–∏–¥–µ–Ω

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        title_label = ctk.CTkLabel(
            self.control_frame,
            text="–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞",
            font=ctk.CTkFont(size=18, weight="bold"),
            anchor="w",
            justify="left"
        )
        title_label.pack(fill="x", padx=0, pady=(10, 0))

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction_label = ctk.CTkLabel(
            self.control_frame,
            text=(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç "
                "—Å–æ—Ö—Ä–∞–Ω—ë–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
                "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –∏ "
                "—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ –∫–ª–∞—Å—Å–∞–º.\n\n"
                "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n\n"
                "‚ö† –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–µ–π:\n"
                "/–ø—É—Ç—å/–∫/–¥–∞—Ç–∞—Å–µ—Ç—É/\n"
                "‚îú‚îÄ‚îÄ train/\n"
                "‚îÇ   ‚îú‚îÄ‚îÄ –∫–ª–∞—Å—Å_1/\n"
                "‚îÇ   ‚îî‚îÄ‚îÄ –∫–ª–∞—Å—Å_2/\n"
                "‚îî‚îÄ‚îÄ test/\n"
                "       ‚îú‚îÄ‚îÄ –∫–ª–∞—Å—Å_1/\n"
                "       ‚îî‚îÄ‚îÄ –∫–ª–∞—Å—Å_2/"
            ),
            wraplength=260,
            anchor="w",
            justify="left",
            font=ctk.CTkFont(size=14)
        )
        instruction_label.pack(fill="x", padx=0, pady=(5, 15))

        # === –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º ===
        dataset_frame = ctk.CTkFrame(self.control_frame, fg_color="transparent")
        dataset_frame.pack(fill="x", pady=5, padx=5)

        ctk.CTkLabel(dataset_frame, text="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º:").pack(anchor="w", pady=(0, 2))
        self.dataset_path_label = ctk.CTkLabel(
            dataset_frame,
            text="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
            font=ctk.CTkFont(size=12),
            wraplength=260,
            anchor="w",
            justify="left",
            text_color="gray"  # –Ω–∞—á–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç (—Å–µ—Ä—ã–π, –µ—Å–ª–∏ –ø—É—Å—Ç–æ)
        )
        self.dataset_path_label.pack(fill="x")

        ctk.CTkButton(dataset_frame, text="–í—ã–±—Ä–∞—Ç—å", command=self.browse_dataset_folder).pack(fill="x", pady=(5, 5))

        # === –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ===
        save_frame = ctk.CTkFrame(self.control_frame, fg_color="transparent")
        save_frame.pack(fill="x", pady=5, padx=5)

        ctk.CTkLabel(save_frame, text="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:").pack(anchor="w", pady=(0, 2))
        self.save_path_label = ctk.CTkLabel(
            save_frame,
            textvariable=self.save_path_var,
            font=ctk.CTkFont(size=12),
            wraplength=260,
            anchor="w",
            justify="left",
            text_color="gray"# –Ω–∞—á–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç (—Å–µ—Ä—ã–π, –µ—Å–ª–∏ –ø—É—Å—Ç–æ)
        )
        self.save_path_label.pack(fill="x")

        ctk.CTkButton(save_frame, text="–í—ã–±—Ä–∞—Ç—å", command=self.browse_save_folder).pack(fill="x", pady=(5, 5))
        # === –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===
        size_frame = ctk.CTkFrame(self.control_frame, fg_color="transparent")
        size_frame.pack(fill="x", pady=10, padx=5)

        ctk.CTkLabel(size_frame, text="–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:").pack(anchor="w")
        row = ctk.CTkFrame(size_frame)
        row.pack(anchor="w")

        ctk.CTkEntry(row, textvariable=self.img_width, width=60).pack(side="left")
        ctk.CTkLabel(row, text="x").pack(side="left", padx=5)
        ctk.CTkEntry(row, textvariable=self.img_height, width=60).pack(side="left")
        # === –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ ===
        ctk.CTkButton(
            self.control_frame,
            text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É",
            command=self.run_preprocessing
        ).pack(pady=15, padx=5, fill="x")

    def browse_dataset_folder(self):
        folder = filedialog.askdirectory()
        if folder:
            self.dataset_path_var.set(folder)  # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π
            self.dataset_path_label.configure(text=folder)
            self.update_label_color(self.dataset_path_label, chosen=True)
        else:
            self.dataset_path_label.configure(text="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            self.update_label_color(self.dataset_path_label, chosen=False)

    def browse_save_folder(self):
        folder = filedialog.askdirectory()
        if folder:
            self.save_path_var.set(folder)
            self.save_path_label.configure(text=folder)
            self.update_label_color(self.save_path_label, chosen=True)
        else:
            self.save_path_label.configure(text="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            self.update_label_color(self.save_path_label, chosen=False)

    def update_label_color(self, label, chosen: bool):
        if chosen:
            label.configure(text_color="white")  # –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
        else:
            label.configure(text_color="gray")  # —Å–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –ø—É—Ç–∏

    def log(self, message: str):
        self.log_textbox.insert("end", message + "\n")
        self.log_textbox.see("end")

    def run_preprocessing(self):
        dataset_path = self.dataset_path_var.get()
        save_path = self.save_path_var.get()
        img_size = (self.img_width.get(), self.img_height.get())

        if not os.path.isdir(dataset_path):
            self.log("‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        self.log(
            f"\n‚ñ∂ –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏...\nüìÇ –ò—Å—Ç–æ—á–Ω–∏–∫: {dataset_path}\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {save_path}\nüìê –†–∞–∑–º–µ—Ä: {img_size}")
        self.after(100, lambda: self.preprocess_and_save_dataset(dataset_path, save_path, img_size))

    def preprocess_and_save_dataset(self, dataset_path: str, save_dir: str = "processed", img_size=(224, 224)):
        self.log(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑ {dataset_path} –≤ {save_dir}...")

        for subset in DATASET_SUBFOLDERS:
            subset_dir = os.path.join(dataset_path, subset)

            if not os.path.exists(subset_dir):
                self.log(f"‚ö† –ü–æ–¥–ø–∞–ø–∫–∞ {subset} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫.")
                continue

            class_dirs = [d for d in os.listdir(subset_dir) if os.path.isdir(os.path.join(subset_dir, d))]
            for class_name in class_dirs:
                class_path = os.path.join(subset_dir, class_name)
                output_class_dir = os.path.join(save_dir, subset, class_name)
                os.makedirs(output_class_dir, exist_ok=True)

                for filename in os.listdir(class_path):
                    if not filename.lower().endswith(config.IMAGE_EXTENSIONS):
                        continue

                    input_path = os.path.join(class_path, filename)
                    img = cv2.imread(input_path)

                    if img is None:
                        self.log(f"‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {filename}. –ü—Ä–æ–ø—É—â–µ–Ω.")
                        continue

                    processed, _, _ = ImageProcessor.preprocess_image(
                        img,
                        size=img_size,
                        save_dir=output_class_dir,
                        base_filename=os.path.splitext(filename)[0]
                    )

                    if processed:
                        self.log(f"‚úÖ {os.path.join(output_class_dir, filename)}")

        self.log("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n")

    def on_close(self):
        pass

